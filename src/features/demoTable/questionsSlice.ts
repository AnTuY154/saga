import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';


// export interface answerDetail {
//     answer_id: string,
//     answer_detail: string,
//     is_true: boolean
// }

// export interface questionDetail {
//     key: string,
//     question_id: string,
//     question_detail: string,
//     type: string,
//     answer: [answerDetail],
// }

export interface questionsState {
    data: {
        totalQuestions: string,
        listQuestion: []
    },
    loading: boolean,
    error: {
        message: string
        status: number
    },
    pagination: {
        current: number,
        total: number,
        pageSize: number
    }
}

const initialState: questionsState = {
    data: {
        totalQuestions: "0",
        listQuestion: []
    },
    loading: false,
    error: {
        message: "",
        status: 200
    },
    pagination: {
        current: 1,
        total: -1,
        pageSize: 5
    }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.


export const questionsSlice = createSlice({
    name: 'questions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

        changePage: (state, action: PayloadAction<any>) => {
            state.pagination = action.payload
        },
        getData: (state, action: PayloadAction<any>) => {
            state.loading = true;
        },
        getDataSuccess: (state, action: PayloadAction<any>) => {
            console.log("11111111111111111111112");
            state.loading = false;
            state.data = action.payload;
            if (state.error.status !== 200) {
                state.error = {
                    message: "",
                    status: 200
                };
            }
            if (state.pagination.total === -1) {
                state.pagination.total = parseInt(action.payload.totalQuestions)
            }
        },
        getDataFail: (state, action: PayloadAction<any>) => {
            state.data = {
                totalQuestions: "0",
                listQuestion: []
            };
            state.error = action.payload;
            state.loading = false;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

});

export const { getData, getDataSuccess, getDataFail, changePage } = questionsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectQuestions = (state: RootState) => state.questions.data;

export const getLoading = (state: RootState) => state.questions.loading;

export const getError = (state: RootState) => state.questions.error;

export const getCurrentPage = (state: RootState) => state.questions.pagination;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default questionsSlice.reducer;
